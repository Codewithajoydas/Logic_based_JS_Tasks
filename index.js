import fs from "fs";
import path from "path";

let tasks = [
  "Reverse a string",
  "Count the vowels in a string",
  "Check if a number is even or odd",
  "Find the largest number in an array",
  "Find the smallest number in an array",
  "Sum all numbers in an array",
  "Multiply all numbers in an array",
  "Check if a string is a palindrome",
  "Find factorial of a number",
  "Generate first N Fibonacci numbers",
  "Count frequency of elements in array",
  "Find duplicates in an array",
  "Remove duplicates from array",
  "Return unique values from array",
  "Flatten a nested array (1 level deep)",
  "Convert a string to Title Case",
  "Find the length of the longest word in a string",
  "Find the second largest number in an array",
  "Find GCD of two numbers",
  "Find LCM of two numbers",
  "Sum of digits in a number",
  "Reverse digits of a number",
  "Swap two variables",
  "Check if two strings are anagrams",
  "Convert a number to binary",
  "Convert binary to decimal",
  "Count words in a sentence",
  "Repeat a string N times",
  "Find the difference between two arrays",
  "Chunk an array into smaller arrays",
  "Remove falsy values from an array",
  "Capitalize the first letter of each word",
  "Check if a number is prime",
  "Generate a random number between 1 and 100",
  "Find the average of numbers in an array",
  "Return all even numbers from an array",
  "Return all odd numbers from an array",
  "Convert Celsius to Fahrenheit",
  "Find the power of a number",
  "Create a countdown timer from N",
  "Reverse the words in a sentence",
  "Sort an array of numbers (manual sort)",
  "Filter numbers greater than N",
  "Find the missing number in a sequence",
  "Find the sum of even numbers in an array",
  "Count the occurrences of a character in a string",
  "Get initials from full name",
  "Pad a number with leading zeros",
  "Find the median of an array",
  "Return only string values from a mixed array",
  "Implement a debounce function",
  "Implement a throttle function",
  "Write a custom map function",
  "Write a custom filter function",
  "Write a custom reduce function",
  "Create a deep clone of an object",
  "Compare two objects deeply",
  "Group array items by property",
  "Find all permutations of a string",
  "Find all subsets of an array",
  "Memoize a function",
  "Count the number of set bits in a number",
  "Rotate a matrix 90 degrees",
  "Transpose a matrix",
  "Check if a matrix is symmetric",
  "Detect a cycle in an array",
  "Merge two sorted arrays",
  "Merge overlapping intervals",
  "Implement binary search",
  "Implement linear search",
  "Find first non-repeating character in string",
  "Check if two rectangles overlap",
  "Check if a string is valid parentheses",
  "Convert a string to a slug (URL friendly)",
  "Implement a basic calculator",
  "Shuffle an array (Fisher–Yates)",
  "Format a number as currency",
  "Find common elements in 3 arrays",
  "Validate an email address",
  "Validate a phone number",
  "Implement LRU Cache",
  "Implement Queue using array",
  "Implement Stack using array",
  "Convert a number to Roman numerals",
  "Convert Roman numerals to numbers",
  "Parse query string into object",
  "Serialize object to query string",
  "Parse a CSV string into array",
  "Implement event emitter",
  "Delay function with setTimeout",
  "Wait for multiple promises",
  "Check if string has balanced brackets",
  "Convert snake_case to camelCase",
  "Convert camelCase to kebab-case",
  "Generate random hex color",
  "Create range of numbers from A to B",
  "Detect prime numbers in range",
  "Count repeated words in paragraph",
  "Find mode in an array",
  "Check if array is sorted",
  "Implement your own Promise.all",
  "Implement your own Promise.race",
  "Create a scheduler for async tasks",
  "Retry a failed async function 3 times",
  "Implement a JSON.stringify clone",
  "Implement a JSON.parse clone",
  "Implement a curry function",
  "Implement a compose function",
  "Write a middleware chain system",
  "Find longest increasing subsequence",
  "Generate power set of an array",
  "Implement binary heap",
  "Create your own event loop simulation",
  "Write a polyfill for Function.prototype.bind",
  "Write a polyfill for Array.prototype.reduce",
  "Implement a virtual DOM diffing algorithm",
  "Build a simple state manager like Redux",
  "Find shortest path in a grid (BFS)",
  "Implement a trie data structure",
  "Parse HTML to nested JSON",
  "Convert JSON to HTML tree",
  "Simulate a file system using objects",
  "Implement a task runner with dependencies",
  "Build a simple publish/subscribe system",
  "Implement retry with exponential backoff",
  "Find the longest valid parentheses substring",
  "Serialize and deserialize a binary tree",
  "Clone a graph (DFS and BFS)",
  "Detect a cycle in a graph",
  "Topological sort of a graph",
  "Build a CSV export function",
  "Build a CSV import parser",
  "Animate a progress bar in console",
  "Create a min/max stack",
  "Evaluate postfix expressions",
  "Build a search autocomplete",
  "Create infinite scroll (simulate API)",
  "Create a lazy image loader",
  "Build a rate limiter",
  "Implement an observer pattern",
  "Debounce form input validation",
  "Auto-save form data every X seconds",
  "Count how many times function is called",
  "Implement versioning of objects",
  "Convert nested object to dot notation",
  "Convert dot notation to nested object",
  "Design a mini templating engine",
  "Write a CLI tool to search files",
  "Build a markdown to HTML converter",
  "Implement async/await using generators",
  "Implement your own JavaScript interpreter (basic)",
  "Create a virtual machine for running bytecode",
  "Write a basic regex engine",
  "Build a mini compiler (parse → AST → output)",
  "Design a system like Git (basic commits, branches)",
  "Build a game engine loop",
  "Write a custom event delegation system",
  "Implement Undo/Redo logic",
  "Track state changes using Proxy",
  "Simulate memory management",
  "Analyze and optimize memory usage of function",
  "Design a module bundler (like Webpack)",
  "Write your own require() loader",
  "Build a command palette like VS Code",
  "Create a visual sorting algorithm demo",
  "Simulate network request timeout & retries",
  "Create a profiler for function execution",
  "Build your own testing framework",
  "Write a JS minifier (remove whitespace, comments)",
  "Implement an in-memory key-value store",
  "Build your own Node.js HTTP server",
  "Implement a basic WebSocket server",
  "Create a terminal emulator in JS",
  "Build a cron-like scheduler",
  "Simulate promise queue with concurrency limit",
  "Write a function that memoizes async calls",
  "Implement a tabbed terminal-like shell",
  "Simulate localStorage/sessionStorage",
  "Track user actions like GTM (analytics)",
  "Build a syntax highlighter",
  "Create a custom validator engine like Yup",
  "Implement virtual scrolling (huge list rendering)",
  "Design a drag-and-drop file uploader",
  "Make a zip/unzip algorithm in JS",
  "Build a mock database API",
  "Write a custom router (SPA)",
  "Track FPS in animation loop",
  "Detect memory leaks in code",
  "Monitor DOM mutations",
  "Implement a global error handler",
  "Build a password strength checker",
  "Obfuscate and deobfuscate JS code",
  "Write an in-browser code editor",
  "Create a JS sandbox to run safe scripts",
  "Build a spreadsheet formula engine",
  "Create a custom observable + reactive system",
  "Visualize algorithms in real-time",
  "Make a web crawler with link tracking",
  "Implement an HTML parser from scratch",
  "Design a real-time collaboration editor (like Google Docs)",
];

if (!fs.existsSync("tasks")) {
  fs.mkdirSync("tasks", {recursive:true});

tasks.forEach((task, i) => {
  let fileName = task.toLowerCase().replace(/[^a-z0-9]/g, "_");
  let filePath = path.join("tasks", `${++i}_${fileName}.js`);
  fs.writeFileSync(
    filePath,
    `//${path.resolve(
      process.cwd(),
      "tasks",
      `${i}_${fileName}.js`
    )}\n // TODO: ${task} \n `
  );
});

}
let argv = parseInt(process.argv[2]);
if (argv) {
  let a = path.resolve(
    process.cwd(),
    path.join("tasks", `${argv}_${tasks[argv - 1].replaceAll(" ", "_")}.js`)
  );
  let data = fs.readFileSync(a, "utf-8");
  console.log(data);
}
